# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tritech_micron/TritechMicronConfig.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class TritechMicronConfig(genpy.Message):
  _md5sum = "2ca5e1f487382f5a303a19fc2149e230"
  _type = "tritech_micron/TritechMicronConfig"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# Tritech Micron configuration parameters.

# Header message.
Header header

# Whether the sonar head is facing upwards.
bool inverted

# Whether the scan is continuous or in sector scan mode.
bool continuous

# Whether the scan is clockwise.
bool scanright

# Whether the scan intensity is an 8-bit or 4-bit number.
bool adc8on

# Initial gain of the sonar pulse. Ranges between 0 and 1.
float64 gain

# Mapping of intensity to dB. Ranges from 0 to 80 dB.
float64 ad_low
float64 ad_high

# Right and left limit of scan if in sector scan mode. Values are in radians
# and range from 0 to 2 pi.
float64 left_limit
float64 right_limit

# Range of scan in meters.
float64 range

# Number of bins per scan slice.
int16 nbins

# Motor step size in radians.
float64 step

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','inverted','continuous','scanright','adc8on','gain','ad_low','ad_high','left_limit','right_limit','range','nbins','step']
  _slot_types = ['std_msgs/Header','bool','bool','bool','bool','float64','float64','float64','float64','float64','float64','int16','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,inverted,continuous,scanright,adc8on,gain,ad_low,ad_high,left_limit,right_limit,range,nbins,step

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TritechMicronConfig, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.inverted is None:
        self.inverted = False
      if self.continuous is None:
        self.continuous = False
      if self.scanright is None:
        self.scanright = False
      if self.adc8on is None:
        self.adc8on = False
      if self.gain is None:
        self.gain = 0.
      if self.ad_low is None:
        self.ad_low = 0.
      if self.ad_high is None:
        self.ad_high = 0.
      if self.left_limit is None:
        self.left_limit = 0.
      if self.right_limit is None:
        self.right_limit = 0.
      if self.range is None:
        self.range = 0.
      if self.nbins is None:
        self.nbins = 0
      if self.step is None:
        self.step = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.inverted = False
      self.continuous = False
      self.scanright = False
      self.adc8on = False
      self.gain = 0.
      self.ad_low = 0.
      self.ad_high = 0.
      self.left_limit = 0.
      self.right_limit = 0.
      self.range = 0.
      self.nbins = 0
      self.step = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4B6dhd().pack(_x.inverted, _x.continuous, _x.scanright, _x.adc8on, _x.gain, _x.ad_low, _x.ad_high, _x.left_limit, _x.right_limit, _x.range, _x.nbins, _x.step))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 62
      (_x.inverted, _x.continuous, _x.scanright, _x.adc8on, _x.gain, _x.ad_low, _x.ad_high, _x.left_limit, _x.right_limit, _x.range, _x.nbins, _x.step,) = _get_struct_4B6dhd().unpack(str[start:end])
      self.inverted = bool(self.inverted)
      self.continuous = bool(self.continuous)
      self.scanright = bool(self.scanright)
      self.adc8on = bool(self.adc8on)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4B6dhd().pack(_x.inverted, _x.continuous, _x.scanright, _x.adc8on, _x.gain, _x.ad_low, _x.ad_high, _x.left_limit, _x.right_limit, _x.range, _x.nbins, _x.step))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 62
      (_x.inverted, _x.continuous, _x.scanright, _x.adc8on, _x.gain, _x.ad_low, _x.ad_high, _x.left_limit, _x.right_limit, _x.range, _x.nbins, _x.step,) = _get_struct_4B6dhd().unpack(str[start:end])
      self.inverted = bool(self.inverted)
      self.continuous = bool(self.continuous)
      self.scanright = bool(self.scanright)
      self.adc8on = bool(self.adc8on)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4B6dhd = None
def _get_struct_4B6dhd():
    global _struct_4B6dhd
    if _struct_4B6dhd is None:
        _struct_4B6dhd = struct.Struct("<4B6dhd")
    return _struct_4B6dhd
