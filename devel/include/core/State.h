// Generated by gencpp from file core/State.msg
// DO NOT EDIT!


#ifndef CORE_MESSAGE_STATE_H
#define CORE_MESSAGE_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace core
{
template <class ContainerAllocator>
struct State_
{
  typedef State_<ContainerAllocator> Type;

  State_()
    : arm(false)
    , rc1(0)
    , rc2(0)
    , rc3(0)
    , rc4(0)
    , rc5(0)
    , rc6(0)
    , light(0.0)
    , camera(0.0)
    , mode()  {
    }
  State_(const ContainerAllocator& _alloc)
    : arm(false)
    , rc1(0)
    , rc2(0)
    , rc3(0)
    , rc4(0)
    , rc5(0)
    , rc6(0)
    , light(0.0)
    , camera(0.0)
    , mode(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _arm_type;
  _arm_type arm;

   typedef int16_t _rc1_type;
  _rc1_type rc1;

   typedef int16_t _rc2_type;
  _rc2_type rc2;

   typedef int16_t _rc3_type;
  _rc3_type rc3;

   typedef int16_t _rc4_type;
  _rc4_type rc4;

   typedef int16_t _rc5_type;
  _rc5_type rc5;

   typedef int16_t _rc6_type;
  _rc6_type rc6;

   typedef double _light_type;
  _light_type light;

   typedef double _camera_type;
  _camera_type camera;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mode_type;
  _mode_type mode;





  typedef boost::shared_ptr< ::core::State_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::core::State_<ContainerAllocator> const> ConstPtr;

}; // struct State_

typedef ::core::State_<std::allocator<void> > State;

typedef boost::shared_ptr< ::core::State > StatePtr;
typedef boost::shared_ptr< ::core::State const> StateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::core::State_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::core::State_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace core

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'core': ['/home/bluerov/Schreibtisch/BlueROV2/src/core/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::core::State_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::core::State_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::core::State_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::core::State_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::core::State_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::core::State_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::core::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0d689844bfa2e5cd74a8f2a60b1a7770";
  }

  static const char* value(const ::core::State_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0d689844bfa2e5cdULL;
  static const uint64_t static_value2 = 0x74a8f2a60b1a7770ULL;
};

template<class ContainerAllocator>
struct DataType< ::core::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "core/State";
  }

  static const char* value(const ::core::State_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::core::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool arm\n\
int16 rc1\n\
int16 rc2\n\
int16 rc3\n\
int16 rc4\n\
int16 rc5\n\
int16 rc6\n\
float64 light\n\
float64 camera\n\
string mode\n\
\n\
";
  }

  static const char* value(const ::core::State_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::core::State_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.arm);
      stream.next(m.rc1);
      stream.next(m.rc2);
      stream.next(m.rc3);
      stream.next(m.rc4);
      stream.next(m.rc5);
      stream.next(m.rc6);
      stream.next(m.light);
      stream.next(m.camera);
      stream.next(m.mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct State_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::core::State_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::core::State_<ContainerAllocator>& v)
  {
    s << indent << "arm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.arm);
    s << indent << "rc1: ";
    Printer<int16_t>::stream(s, indent + "  ", v.rc1);
    s << indent << "rc2: ";
    Printer<int16_t>::stream(s, indent + "  ", v.rc2);
    s << indent << "rc3: ";
    Printer<int16_t>::stream(s, indent + "  ", v.rc3);
    s << indent << "rc4: ";
    Printer<int16_t>::stream(s, indent + "  ", v.rc4);
    s << indent << "rc5: ";
    Printer<int16_t>::stream(s, indent + "  ", v.rc5);
    s << indent << "rc6: ";
    Printer<int16_t>::stream(s, indent + "  ", v.rc6);
    s << indent << "light: ";
    Printer<double>::stream(s, indent + "  ", v.light);
    s << indent << "camera: ";
    Printer<double>::stream(s, indent + "  ", v.camera);
    s << indent << "mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CORE_MESSAGE_STATE_H
