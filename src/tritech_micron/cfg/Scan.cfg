#!/usr/bin/env python
# -*- coding: utf-8 -*-

import math
from dynamic_reconfigure.parameter_generator_catkin import (
    bool_t, int_t, double_t, ParameterGenerator)


def to_radians(angle):
    """Converts units of 1/16th of a gradian to radians.

    Args:
        angle: Angle in units of 1/16th of a gradian.

    Returns:
        Angle in radians.
    """
    return angle / 3200.0 * math.pi


gen = ParameterGenerator()

# Add available sonar options.
gen.add("inverted", bool_t, 0, "Upside down", True)
gen.add("continuous", bool_t, 0, "Scan continuously or only a sector", True)
gen.add("scanright", bool_t, 0, "Rotate clockwise", True)
gen.add("adc8on", bool_t, 0, "ADC 8 mode", True)
gen.add("gain", double_t, 0, "Gain", 0.50, 0, 1)
gen.add("ad_low", double_t, 0, "Minimum amplitude in dB", 0, 0, 80)
gen.add("ad_high", double_t, 0, "Maximum amplitude in dB", 80, 0, 80)
gen.add("left_limit", double_t, 0, "Left limit in rad", to_radians(2400), 0,
        2 * math.pi)
gen.add("right_limit", double_t, 0, "Right limit in rad", to_radians(4000), 0,
        2 * math.pi)
gen.add("speed", double_t, 0, "Speed of sound", 1500, 1400, 1600)
gen.add("range", double_t, 0, "Range in meters", 10.0, 2, 100)
gen.add("mo_time", int_t, 0, "Motor speed in microseconds", 250, 0, 2550)
gen.add("nbins", int_t, 0, "Number of bins per slice", 400, 0, 1500)

# Add step size resolution options.
resolutions = gen.enum([
    gen.const("LOWEST", double_t, to_radians(255), "Lowest resolution"),
    gen.const("LOWER", double_t, to_radians(128), "Lower resolution"),
    gen.const("LOWERISH", double_t, to_radians(64), "Lowerish resolution"),
    gen.const("LOW", double_t, to_radians(32), "Low resolution"),
    gen.const("MEDIUM", double_t, to_radians(16), "Medium resolution"),
    gen.const("HIGH", double_t, to_radians(8), "High resolution"),
    gen.const("ULTIMATE", double_t, to_radians(4), "Ultimate resolution")
], "Default resolution enumeration")
gen.add(
    "step",
    double_t,
    0,
    "Motor step size in rad",
    to_radians(32),
    to_radians(1),
    to_radians(255),
    edit_method=resolutions)

exit(gen.generate("tritech_micron", "tritech_micron", "Scan"))
