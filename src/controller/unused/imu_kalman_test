#!/usr/bin/env python
from pykalman import KalmanFilter
import numpy as np
import matplotlib.pyplot as plt
import time
from scipy import signal
import rospy
from sensor_msgs.msg import Imu

AccX_Variance = 1.5*1e-4

class Imu_Kalman():
    def __init__(self):
        rospy.Subscriber('/BlueRov2/imu/data', Imu, self._callback_imu_data)
        rospy.Subscriber('/BlueRov2/imu/imu1', Imu, self._callback_imu_1)
        rospy.Subscriber('/BlueRov2/imu/imu2', Imu, self._callback_imu_2)
        self.rosrate = 100
        self.rate = rospy.Rate(self.rosrate)
        
        self.t0 = time.time()
        self.orientation = [0,0,0,0]
        self.acc_imu1 = [0,0,0]
        self.acc_imu2 = [0,0,0]
        self.acc_mean = [0,0,0]
        
        #Filter parameters
        self.accX_mean_exp_fltr = 0
        self.accX_mean_array = np.zeros((34, ))
        self.accX_bf_kalman = 0
        self.accX_bf_kalman2 = 0

        self.accX_IMU1_exp = 0
        self.accX_IMU2_exp = 0
        self.accX_IMU1_array = np.zeros((34, ))
        self.accX_IMU2_array = np.zeros((34, ))
        self.accX_IMU1_hp = 0
        self.accX_IMU2_hp = 0
        self.accX_bf_kalman = 0

        self.w = 0.1 
        self.highpass = signal.butter(10,0.001,'high', analog=False, output='ba')  
        # time step
        self.dt = 1/100.
     
        # transition_matrix  
        self.F = [[1, self.dt, 0.5*self.dt**2], 
                  [0,  1,       self.dt],
                  [0,  0,        1]]
     
        # observation_matrix   
        self.H = [0, 0, 1]
     
        # transition_covariance 
        self.Q = [[0.2,    0,      0], 
                  [  0,  10e3,      0],
                  [  0,    0,  10e-4]]
        self.Q2 = [[0.2,    0,      0], 
                  [  0,  10e-3,      0],
                  [  0,    0,  10e-4]]
     

        # observation_covariance 
        #(the value can be calculated based on your sensors datasheet).
        self.R = AccX_Variance
     
        # initial_state_mean
        self.X0 =  [0,
                    0,
                    -0.05]
     
        # initial_state_covariance
        self.P0 = [[  0,    0,               0], 
                   [  0,    0,               0],
                   [  0,    0,   AccX_Variance]]
     
        self.n_dim_state = 3
        self.filtered_state_means = np.zeros((2, self.n_dim_state))
        self.filtered_state_covariances = np.zeros((2, self.n_dim_state, self.n_dim_state))
     
        self.kf = KalmanFilter(transition_matrices = self.F, 
                                observation_matrices = self.H, 
                                transition_covariance = self.Q, 
                                observation_covariance = self.R, 
                                initial_state_mean = self.X0, 
                                initial_state_covariance = self.P0)
        self.filtered_state_means[0] = self.X0
        self.filtered_state_covariances[0] = self.P0
         
        self.filtered_state_means2 = np.zeros((2, self.n_dim_state))
        self.filtered_state_covariances2 = np.zeros((2, self.n_dim_state, self.n_dim_state))
        self.kf2 = KalmanFilter(transition_matrices = self.F, 
                                observation_matrices = self.H, 
                                transition_covariance = self.Q2, 
                                observation_covariance = self.R, 
                                initial_state_mean = self.X0, 
                                initial_state_covariance = self.P0)
        self.filtered_state_means2[0] = self.X0
        self.filtered_state_covariances2[0] = self.P0

    def _callback_imu_data(self, msg):
        self.orientation = [msg.orientation.w,
                            msg.orientation.x,
                            msg.orientation.y,
                            msg.orientation.z]

    def _callback_imu_1(self, msg):
        #moy : sur 40s 0.41110448395365074
        #moy : sur 3600s 0.35930319258263654
        self.acc_imu1 = [msg.linear_acceleration.x-0.35930319258263654,
                                        msg.linear_acceleration.y,
                                        msg.linear_acceleration.z]

    def _callback_imu_2(self, msg):
        #moy : 0.27067840479669764
        #moy : sur 3600s  0.23206011098693963
        self.acc_imu2 = [msg.linear_acceleration.x-0.23206011098693963,
                                    msg.linear_acceleration.y,
                                    msg.linear_acceleration.z]

    def filterFusedIMUs(self, enable=True):
        mean = (self.acc_imu1[0]+ self.acc_imu2[0])/2
        self.accX_mean_exp = self.w*mean+(1-self.w)*self.accX_mean_exp
        n = len(self.accX_mean_array)
        if enable :
            for i in range(0,n-1):
                self.accX_mean_array[i] = self.accX_mean_array[i+1]
            self.accX_mean_array[33] = self.accX_mean_exp
            output = signal.filtfilt(self.highpass[0], self.highpass[1], self.accX_mean_array)
            self.accX_bf_kalman = output[33]
        else:
            self.accX_bf_kalman = (self.acc_imu1[0]+self.acc_imu2[0])/2

    def filter(self, enable=True):
        self.accX_IMU1_exp = self.w * self.acc_imu1[0]+(1-self.w)*self.accX_IMU1_exp
        self.accX_IMU2_exp = self.w * self.acc_imu2[0]+(1-self.w)*self.accX_IMU2_exp
        self.accX_bf_kalman2 = (self.accX_IMU1_exp+self.accX_IMU2_exp)/2
        self.accX_bf_kalman = (self.accX_IMU1_exp+self.accX_IMU2_exp)/2
        n = len(self.accX_IMU1_array)
        if enable :
            for i in range(0,n-1):
                self.accX_IMU1_array[i] = self.accX_IMU1_array[i+1]
                self.accX_IMU2_array[i] = self.accX_IMU2_array[i+1]
            self.accX_IMU1_array[33] = self.accX_IMU1_exp
            self.accX_IMU2_array[33] = self.accX_IMU2_exp
            self.accX_IMU1_hp= signal.filtfilt(self.highpass[0], self.highpass[1], self.accX_IMU1_array)
            self.accX_IMU2_hp= signal.filtfilt(self.highpass[0], self.highpass[1], self.accX_IMU2_array)
            #self.accX_bf_kalman = (self.accX_IMU1_hp[33]+self.accX_IMU2_hp[33])/2
        else:
            pass
            #self.accX_bf_kalman = (self.acc_imu1[0]+self.acc_imu2[0])/2

# compensate the accelerometer readings from gravity. 
# @param q the quaternion representing the orientation of a 9DOM MARG sensor array
# @param acc the readings coming from an accelerometer expressed in g
#
# @return a 3d vector representing dinamic acceleration expressed in g
    def gravity_compensate(self, q, acc):
        g = [0.0, 0.0, 0.0]

# get expected direction of gravity
        g[0] = 2 * (q[1] * q[3] - q[0] * q[2])
        g[1] = 2 * (q[0] * q[1] + q[2] * q[3])
        g[2] = (q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3])

# compensate accelerometer readings with the expected direction of gravity

        return [acc[0] - 9.81*g[0], acc[1] - 9.81*g[1], acc[2] - 9.81*g[2]]

    def kalman_update(self):
        #self.filterFusedIMUs(True) #filter X axis acceleration
        self.filter()
        self.acc_mean[0] = (self.acc_imu1[0]+self.acc_imu2[0])/2.
        self.acc_mean[1] = (self.acc_imu1[1]+self.acc_imu2[1])/2.
        self.acc_mean[2] = (self.acc_imu1[2]+self.acc_imu2[2])/2.

        self.filtered_state_means[1], self.filtered_state_covariances[1] = self.kf.filter_update(self.filtered_state_means[0],
                                                                                                self.filtered_state_covariances[0],
                                                                                                self.accX_bf_kalman)
        #self.acc_mean[0]
        self.filtered_state_means[0] = self.filtered_state_means[1]
        self.filtered_state_covariances[0] = self.filtered_state_covariances[1]

        self.filtered_state_means2[1], self.filtered_state_covariances2[1] = self.kf2.filter_update(self.filtered_state_means2[0],
                                                                                                self.filtered_state_covariances2[0],
                                                                                                self.accX_bf_kalman2) 
        self.filtered_state_means2[0] = self.filtered_state_means2[1]
        self.filtered_state_covariances2[0] = self.filtered_state_covariances2[1]

    def correct_velocity_drift(self):
        t = time.time()-self.t0
    #-0.024093146960597331
        return self.filtered_state_means[1, 1]-(-0.014819050782577519*t)

if __name__ == "__main__":
    rospy.init_node('imu_kalman', anonymous=True)
    imu_kalman = Imu_Kalman()
    file_data = open("data_imu_47.csv", "w")
    t0 = time.time()
    while time.time()-t0<100:
            imu_kalman.kalman_update()
            file_data.write("{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}\n".format(time.time()-t0, 
                                                                            imu_kalman.acc_imu1[0], 
                                                                            imu_kalman.accX_IMU1_exp,
                                                                            imu_kalman.accX_IMU1_hp[33],
                                                                            imu_kalman.acc_imu2[0], 
                                                                            imu_kalman.accX_IMU2_exp,
                                                                            imu_kalman.accX_IMU2_hp[33],
                                                                            imu_kalman.accX_mean_exp_fltr, 
                                                                            imu_kalman.accX_bf_kalman,
                                                                            imu_kalman.filtered_state_means[1, 2], #accX estimated 
                                                                            imu_kalman.filtered_state_means[1, 1], #VelX estimated
                                                                            imu_kalman.correct_velocity_drift(),  
                                                                            imu_kalman.filtered_state_means[1, 0],  #PosXestimated
                                                                            imu_kalman.filtered_state_means2[1, 2], #accX estimated 
                                                                            imu_kalman.filtered_state_means2[1, 1], #VelX estimated
                                                                            imu_kalman.filtered_state_means2[1, 0]))  #PosXestimated
            print("time : {}".format(time.time()-t0))
#            print("AccX_estimated", imu_kalman.filtered_state_means[1, 2])
#            print("VelX_estimated", imu_kalman.filtered_state_means[1, 1])
#            print("VelX_withoutdrif?", imu_kalman.correct_velocity_drift())
#            print("PosX_estimated", imu_kalman.filtered_state_means[1, 0]) 
#
            #print(imu_kalman.gravity_compensate(imu_kalman.orientation, imu_kalman.acc_imu1))
            #print(imu_kalman.acc_imu1)
            time.sleep(0.01)
    file_data.close()
