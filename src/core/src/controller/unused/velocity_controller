#!/usr/bin/env python

import rospy
from std_msgs.msg import String
from std_msgs.msg import UInt16
from std_msgs.msg import Bool
from sensor_msgs.msg import Imu
from bluerov_ros_playground.msg import Set_velocity
from bluerov_ros_playground.msg import Set_target

class Velocity_Control():
    def __init__(self, velocity_desired=1, pwm_max=1550, pwm_neutral=1500, KP=100, KD=25, rosrate=6):
        self.pub_pwm = rospy.Publisher('/Command/velocity', UInt16, queue_size=10)
        rospy.Subscriber('/BlueRov2/imu/data', Imu, self._callback_imu_data)
        self.rate = rospy.Rate(rosrate)

        self.velocity_desired = velocity_desired
        self.imu_data = [0, 0, 0] 
        self.pwm_max = pwm_max
        self.pwm_neutral = pwm_neutral
        self.KP = KP
        self.KD = KD

        self.time = rospy.get_time()
        self.velocity = 0
        self.offset_x = 0
        self.k = 0
        self.N = 20
    
        rospy.Subscriber('/Settings/set_velocity', Set_velocity, self._callback_set_vel)
        rospy.Subscriber('/Settings/set_target', Set_target, self._callback_set_target)
        
    def _callback_imu_data(self, msg):
        self.imu_data = [msg.linear_acceleration.x,
                        msg.linear_acceleration.y,
                        msg.linear_acceleration.z]
        if self.k < self.N:
            self.offset_x += self.imu_data[0]
            self.k += 1
            if self.k == self.N:
                self.offset_x = self.offset_x/self.N

        	                
    def _callback_set_vel(self, msg):
        if msg.pwm_max < 1500:
            self.pwm_max = 1500
        else:
            self.pwm_max = msg.pwm_max
        self.KP = msg.KP 
        self.KD = msg.KD 

    def _callback_set_target(self, msg):
        self.velocity_desired = msg.velocity_desired


    def control(self):
        t = rospy.get_time() #time in secs
        delta_t = t - self.time
        self.time = t
        #print("offset_x : ", self.offset_x)
        if self.k == self.N:
            acceleration = self.imu_data[0]-self.offset_x
            #print("acceleration",acceleration)
            self.velocity = acceleration*delta_t
            #print("velocity",self.velocity)
            u = self.KP*(self.velocity_desired-self.velocity) - self.KD*acceleration
            #print(self.KP*(self.velocity_desired-self.velocity) , -self.KD*acceleration)
        else:
            u = 0
        return u


    def saturation(self, pwm):
	    pwm_min = self.pwm_neutral - (self.pwm_max - self.pwm_neutral)
	    if pwm > self.pwm_max :
		    pwm = self.pwm_max
	    if pwm < pwm_min:
		    pwm = pwm_min
	    return int(pwm)

    def main(self):
        u = self.control()
        pwm = 1500 + u 
        pwm = self.saturation(pwm)
        self.pub_pwm.publish(pwm)
        print("VELOCITY_DESIRED : {}, VELOCITY_MESURED : {}, PWM : {} ".format(self.velocity_desired,'Not_implemented_yet', pwm))

if __name__ == "__main__":
    rospy.init_node('velocity_controller', anonymous=True)
    velocity_control = Velocity_Control()
    
    while not rospy.is_shutdown():
        velocity_control.main()
        velocity_control.rate.sleep()
